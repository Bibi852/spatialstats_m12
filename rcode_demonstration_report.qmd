---
title: "Module 12: Spatiotemporal Variogram Vignette"
author: "Abigail Lee"
format: html
editor: visual
---

# Spatiotemporal Analysis Using R

-   Spatiotemporal autocorrelation is common in real-world ecological data
    -   Ecological patterns are rarely random â€” close values in space/time tend to be similar.
-   Why spatiotemporal variograms?
    -   They help us measure how similarity decreases with distance and time.
    -   Avoids bias in model estimates and is essential for accurate interpolation.

| Better predictions lead to higher quality research and decision-making. Spatiotemporal autocorrelation modelling turns raw data into actionable insights for environmental/ecological policy!

::: {.callout-note title = "Data For Vignette"}

Although I will be using simulated data for this r-code vignette (provided as a resource for this week), the continuous ecological variable (pika stress hormone concentration: `concentration_pg_g`) is based on the open-source dataset `nwt_pikas` from the `lterdatasampler` package in R. I have [provided their website with this r-code demonstration](https://lter.github.io/lterdatasampler/articles/nwt_pikas_vignette.html) and you can explore this dataset further by running the command `data(nwt_pikas, package = "lterdatasampler")` in R.

:::

# Resources

This R-code vignette is based on the following open-source resources on spatiotemporal variograms and spatiotemporal data analysis in R.

-   Spatio-temporal variography using `air` sample data from `spacetime` - <https://cran.r-project.org/web/packages/gstat/vignettes/st.pdf>

-   Transforming data into a `STIDF` object - <https://www.r-bloggers.com/2015/08/spatio-temporal-kriging-in-r/>

-   More on `STIDF` objects, and a whole chapter on Spatio-Temporal analysis in R more broadly - <https://gdsl-ul.github.io/san/10-st_analysis.html>

# Preparing Dataset

-   `gstat` requires `STIDF` or `STFDF` for spatiotemporal modeling (from the `spacetime` package)
    -   `STFDF` - full grid (every station x every time step) - rare in ecological data
    -   `STIDF` - irregular grid - more realistic for field observations
-   `STIDF` object:
    -   `SpatialPoints` object (coordinates)
    -   Time vector (`POSIXct`)
    -   Data frame (e.g., stress concentrations)
-   Together, these tell us **what happened, where, and when**

## Import libraries

```{r}
# import necessary libraries
library(pacman)
p_load(sp, spacetime, dplyr, gstat, lattice)
```

## Simulated Dataset

```{r}
# setting seed for reproducibility
set.seed(41)

# 12 stations with UTM coords
pikas_stations <- data.frame(
    # identifiers of stations
  station = paste0("S", 1:10),
  # x coordinates (easting)
  x = runif(10, 500000, 550000), 
  # y coordinates (northing)
  y = runif(10, 4400000, 4500000)     
)

```

## 12 Weekly time points (May-July 2018)

```{r}
#  simulating 12 weekly dates
pikas_dates <- seq(as.Date("2018-05-01"), by = "1 week", length.out = 5)
```

## Long-format grid of station x time

```{r}
# binding spatial and temporal components into a grid
pikas_grid <- expand.grid(station = pikas_stations$station, date = pikas_dates)
pikas_grid_id <- left_join(pikas_grid, pikas_stations, by = "station")
```

## Adds spatial and temporal trends to simulate autocorrelation

```{r}

# adding temporal and spatial trends
pikas_grid_trend <- pikas_grid_id %>%
    mutate(
    # Normalized trends
    space_trend = sqrt((x - min(x))^2 + (y - min(y))^2),
    
    space_trend_scaled = space_trend / max(space_trend),
    space_trend_scaled = space_trend_scaled + rnorm(n(), 0, 0.1),
    
    time_trend = as.numeric(difftime(date, min(date), units = "weeks")) + rnorm(n(), 0, 0.3),
    time_trend_scaled = time_trend / max(time_trend),
    

    concentration_pg_g = 3000 +
      1200 * space_trend_scaled^2 +       # squared: makes semivariance rise fast
      700 * time_trend_scaled^2 +        # same for time
      rnorm(n(), 0, 10) 

                      # random noise
  )

write.csv(pikas_grid_trend, "pikas_grid_trend.csv")
```

## Final Steps

### Convert station coordinates to `SpatialPoints` object

```{r}

# convert to spatial object
coordinates(pikas_grid_trend) <- ~x + y
proj4string(pikas_grid_trend) <- CRS("+proj=utm +zone=13 +datum=WGS84")
```

### Convert temporal object to `POSIXct`

```{r}
# convert to date object
pikas_grid_trend$date <- as.POSIXct(pikas_grid_trend$date)
```

### Extract spatial, temporal and data components

```{r}
# create components (footnote here)
# sp object
pikas_sp <- SpatialPoints(pikas_grid_trend@coords, proj4string = CRS("+proj=utm +zone=13 +datum=WGS84"))
# temporal vectors object
pikas_tm <- pikas_grid_trend$date
# df of only the outcome variable
pikas_df <- data.frame(concentration_pg_g = pikas_grid_trend$concentration_pg_g)
```

### Combine using `STIDF(sp, time, data)`

```{r}
# create STIDF
pikas_stobj <- STIDF(pikas_sp, pikas_tm, pikas_df)
pikas_stobj@data$concentration_pg_g <- (pikas_stobj@data$concentration_pg_g)/1000

```

# Computing Empirical Spatiotemporal Variogram

```{r}
# variogram of raw variable 
pikas_vv <- variogramST(
  concentration_pg_g ~ 1,
  # STIDF data to use
  data = pikas_stobj,
  width=5000,
  
  
  tlags = 0:5,
  tunit = "weeks",
  na.omit = T
  
)
```

## Plotting variogram in 2D and 3D

```{r}
#2d variogram
plot(pikas_vv, map = T)  
#3d variogram
plot(pikas_vv, wireframe = T)
```

-   2D Variogram plot (lag map)
    -   x-axis: spatial lag in meters
    -   y-axis: temporal lag in weeks
    -   color: semivariance
    -   lower (darker) values: strong autocorrelation (more similarity) - points close in space and time (bottom-left) show low semivariance and points distant both spatially and temporally (top right) show high semivariance
-   3D Variogram plot (surface)
    -   x-axis: spatial lag, y-axis: temporal lag
    -   z-axis: semivariance (height)
    -   surface rises with lag
    -   no diagonal twist - suggests that space and time should act independently?

```{r}
# formatting 3D plots using lattice package
wireframe(
    gamma ~ spacelag * timelag, 
    data = as.data.frame(pikas_vv),
    drape = T,
    colorkey = T,
    screen = list(z = -60, x = -60),
    par.settings = list(
        regions = list(col = heat.colors(100)),
        axis.line = list(col = "transparent")
    ),
    xlab = "Spatial Lag (m)",
    ylab = "Temporal Lag (weeks)",
    zlab = "Semivariance",
    main = "Empirical Spatiotemporal Variogram Surface"
)

```

```{r}
library(plotly)
library(tidyverse)
# plotly needs a complete rectangular matrix for the 3D variogram
pikas_plotly <- as.data.frame(pikas_vv) %>%
  select(spacelag, timelag, gamma) %>%
  pivot_wider(names_from = spacelag, values_from = gamma)
# semivariance matrix
z_pikas <- as.matrix(pikas_plotly[,-1])    
# temporal and spatial data separately
y_pikas <- pikas_plotly$timelag                
x_pikas <- as.numeric(colnames(pikas_plotly))    

plot_ly(
  x = x_pikas,
  y = y_pikas,
  z = z_pikas,
  # 3D surface variogram
  type = "surface",
  colorscale = "Viridis",
  # presents information for each combination lag
  hoverinfo = "x+y+z"
) %>%
    # labs
  layout(
    title = "Spatiotemporal Variogram Surface",
    scene = list(
      xaxis = list(title = "Spatial Lag (m)"),
      yaxis = list(title = "Temporal Lag (weeks)"),
      zaxis = list(title = "Semivariance")
    )
  )


```

# Fitting Spatiotemporal Variogram Models

## Separable - simple, stable, no interaction term

```{r}
# separable model
model_sep <- vgmST("separable",
                   space = vgm(1, "Exp", 5000, 0.1),
                   time = vgm(1, "Exp", 2, 0.1), sill = 1)
fit_sep <- fit.StVariogram(pikas_vv, model_sep, method = "L-BFGS-B")
attr(fit_sep, "optim")$value
```

## Metric - single spatiotemporal distance

```{r}
# metric models
model_metric <- vgmST("metric",
                      joint = vgm(1, "Exp", 5000, 0.1),
                      stAni =1000)
fit_metric <- fit.StVariogram(pikas_vv, model_metric)
attr(fit_metric, "optim")$value
```

## Product Sum - space, time and a cross term

```{r}
# product sum model
model_prod <- vgmST("productSum",
                    space = vgm(1, "Exp", 5000, 0.1),
                    time = vgm(1, "Exp", 2, 0.1),
                    k = 0.5)
fit_prod <- fit.StVariogram(pikas_vv, model_prod)
attr(fit_prod, "optim")$value
```

## sumMetric - space, time and joint functions

```{r}
# sum metric model
model_sumMetric <- vgmST("sumMetric",
                         space = vgm(1, "Exp", 5000, 0.1),
                         time = vgm(1, "Exp", 2, 0.1),
                         joint = vgm(1, "Exp", 5000, 0.1),
                         stAni = 1000)
fit_sumMetric <- fit.StVariogram(pikas_vv, model_sumMetric)
attr(fit_sumMetric, "optim")$value

```

## simpleSumMetric - simplified sumMetric

```{r}
# simple sum metric model
model_simple <- vgmST("simpleSumMetric",
                      space = vgm(1, "Exp", 5000, 0.1),
                      time = vgm(1, "Exp", 2, 0.1),
                      joint = vgm(1, "Exp", 5000, 0.1),
                      nugget = 0.05,
                      stAni = 1000)
fit_simple <- fit.StVariogram(pikas_vv, model_simple)
attr(fit_simple, "optim")$value
```

# Comparing different variograms

```{r}
# separable model captures the sample variogram quite nicely, however it doesnt capture the variable spikes in semivariance at high time lags, the steeper slope (temporal lags) of the sum/sumMetric/simpleSumMetric models helps capture this and thus have lower RMSEs. However, these models don't seem to capture spatial variation in semivariance at each time lag as well - the rise in semivariance is more gentle. Keep in mind I also added random noise in a few places when creating this simulated data. 
plot(pikas_vv, list(fit_sep, fit_metric, fit_prod, fit_sumMetric, fit_simple), 
     wireframe = T, zlim = c(0, 0.3),
     zlab = NULL, xlab = list("distance (m)", rot = 30),
     ylab = list("time lag (weeks)", rot = 35),
     scales = list(arrows = F, z = list(distance = 5)))
```

Comparing the empirical variogram to the fitted variogram models (predicted semivariance)

```{r}

attr(fit_sep, "optim")$value
attr(fit_metric, "optim")$value
attr(fit_prod, "optim")$value
attr(fit_sumMetric, "optim")$value
attr(fit_simple, "optim")$value


```
